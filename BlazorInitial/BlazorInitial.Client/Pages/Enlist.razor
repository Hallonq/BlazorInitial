@page "/enlist"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

<h3>EnlistInArmyForm</h3>

<EditForm Model="@model" EditContext="editContext" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="model.Email" class="form-control" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="model.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    [Parameter]
    public EditContext? editContext { get; set; }
    public FormModel model = new();
    public class FormModel : IValidatableObject
    {
        [Required]
        public Guid Guid { get; set; } = Guid.NewGuid();
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var validationResults = new List<ValidationResult>();

            if (string.IsNullOrWhiteSpace(Guid.ToString()))
            {
                validationResults.Add(new ValidationResult("guid not created."));
            }

            if (string.IsNullOrWhiteSpace(Email))
            {
                validationResults.Add(new ValidationResult("email cannot be empty"));
            }

            if (string.IsNullOrWhiteSpace(Password))
            {
                validationResults.Add(new ValidationResult("password cannot be empty"));
                return validationResults;
            }

            var passwordSpecifics = new List<string>();

            if (Password.Length >= 6)
                passwordSpecifics.Add("6 characters");

            if (!Regex.IsMatch(Password, "[A-Z]"))
                passwordSpecifics.Add("one uppercase letter");

            if (!Regex.IsMatch(Password, "[0-9]"))
                passwordSpecifics.Add("one number");

            if (passwordSpecifics.Count > 0)
            {
                string message = "password needs atleast " + string.Join(", ", passwordSpecifics);
                validationResults.Add(new ValidationResult(message, new[] { nameof(Password) }));
            }

            return validationResults;
        }
    }

    private void Submit()
    {
        Console.WriteLine("Submitting form data...");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
